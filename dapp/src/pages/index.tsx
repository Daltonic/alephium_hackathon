import React, { useEffect, useState } from 'react'
import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import jumper from '../../assets/frog.gif'
import obstacle from '../../assets/flower.png'

export default function Home() {
  const [isJumping, setIsJumping] = useState(false)
  const [isGameOver, setIsGameOver] = useState(false)

  const jumperRef = React.useRef<HTMLDivElement>(null)
  const obstacleRef = React.useRef<HTMLDivElement>(null)
  const [leftPosition, setLeftPosition] = useState<number>(100)
  const [position, setPosition] = useState<number>(270)
  const [canJump, setCanJump] = useState(true)
  const [resetObstacle, setResetObstacle] = useState(false)
  let animationId: number

  const checkCollision = () => {
    if (
      obstacleRef.current &&
      jumperRef.current &&
      parseInt(obstacleRef.current.style.left) < 20 && // assuming 20 is the width of the jumper
      parseInt(obstacleRef.current.style.left) + 24 > 0 && // 24 is the width of the obstacle
      parseInt(jumperRef.current.style.top) < 200 && // adjust this value based on obstacle's height
      parseInt(jumperRef.current.style.top) + 16 > 160 // 16 is the height of the jumper, 160 is obstacle's top position
    ) {
      console.log('Game Over!')
      setIsGameOver(true)
      cancelAnimationFrame(animationId) // Stop the animation
    }
  }

  useEffect(() => {
    let obstacleSpeed = 1

    const animateEnemy = () => {
      if (obstacleRef.current && !isGameOver) {
        const currentLeft = parseInt(obstacleRef.current.style.left || '0')
        const newLeft = Math.max(-10, currentLeft - obstacleSpeed)

        if (newLeft <= -10) {
          setLeftPosition(100)
          setResetObstacle(true)
        } else {
          setLeftPosition(newLeft)
          setResetObstacle(false)
        }
      }
      animationId = requestAnimationFrame(animateEnemy)
    }
    animationId = requestAnimationFrame(animateEnemy)

    // Clean up
    return () => {
      cancelAnimationFrame(animationId)
    }
  }, [leftPosition, isGameOver, resetObstacle])

  useEffect(() => {
    let intervalId: any

    if (isJumping) {
      let isGoingUp = true
      let jumpHeight = 140

      intervalId = setInterval(() => {
        if (isGoingUp) {
          setPosition((prevPos) => {
            if (prevPos <= jumpHeight) {
              isGoingUp = false
            }
            return Math.max(prevPos - 10, jumpHeight)
          })
        } else {
          setPosition((prevPos) => {
            if (prevPos >= 270) {
              clearInterval(intervalId)
              setIsJumping(false)
              setCanJump(true)
            }
            return Math.min(prevPos + 25, 270)
          })
        }
      }, 50)
    }

    return () => {
      clearInterval(intervalId)
    }
  }, [isJumping])

  const jump = () => {
    if (canJump) {
      setIsJumping(true)
      setPosition(140)
      setCanJump(false)
    }
  }

  useEffect(() => {
    const intervalId = setInterval(checkCollision, 10)

    return () => {
      clearInterval(intervalId)
    }
  }, [])

  return (
    <div className={styles.container}>
      <Head>
        <title>AlphHack</title>
        <meta name="description" content="Generated by @alephium/cli init" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="w-full h-80 border-gray-700 border mx-auto overflow-hidden">
        <div
          ref={jumperRef}
          className={`bg-no-repeat w-16 h-16 relative bg-cover bg-center ${isJumping ? 'jump' : ''}`}
          style={{ backgroundImage: `url(${jumper.src})`, top: `${position}px` }}
        />
        <div
          ref={obstacleRef}
          className="bg-no-repeat w-24 h-24 relative top-[160px] bg-cover bg-center"
          style={{ backgroundImage: `url(${obstacle.src})`, left: `${leftPosition}%` }}
        />
      </div>

      {/* {!isGameOver && ( */}
      <button onClick={jump} className="bg-red-500 text-white rounded-full p-1 min-w-28 text-md hidden md:block">
        Jump
      </button>
      {/* )} */}
    </div>
  )
}
