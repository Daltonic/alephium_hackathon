/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as AlphHackContractJson } from "../AlphHack.ral.json";
import { getContractByCodeHash } from "./contracts";
import { ProposalStruct, AllStructs } from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace AlphHackTypes {
  export type Fields = {
    owner: Address;
    balance: bigint;
    totalProposals: bigint;
  };

  export type State = ContractState<Fields>;

  export type FundedEvent = ContractEvent<{
    initiator: Address;
    amount: bigint;
  }>;
  export type TransferedEvent = ContractEvent<{
    initiator: Address;
    amount: bigint;
  }>;

  export interface CallMethodTable {
    receive: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    transfer: {
      params: CallContractParams<{ receiver: Address; amount: bigint }>;
      result: CallContractResult<null>;
    };
    propose: {
      params: CallContractParams<{
        title: HexString;
        description: HexString;
        amount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    vote: {
      params: CallContractParams<{
        pid: bigint;
        choosen: boolean;
        amount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    getBalance: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getProposal: {
      params: CallContractParams<{ pid: bigint }>;
      result: CallContractResult<ProposalStruct>;
    };
    getProposalCount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    hasVoted: {
      params: CallContractParams<{ pid: bigint; voter: Address }>;
      result: CallContractResult<boolean>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    receive: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    transfer: {
      params: SignExecuteContractMethodParams<{
        receiver: Address;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    propose: {
      params: SignExecuteContractMethodParams<{
        title: HexString;
        description: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    vote: {
      params: SignExecuteContractMethodParams<{
        pid: bigint;
        choosen: boolean;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getBalance: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getProposal: {
      params: SignExecuteContractMethodParams<{ pid: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    getProposalCount: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    hasVoted: {
      params: SignExecuteContractMethodParams<{ pid: bigint; voter: Address }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = {
    voted?: Map<HexString, boolean>;
    proposals?: Map<bigint, ProposalStruct>;
  };
}

class Factory extends ContractFactory<AlphHackInstance, AlphHackTypes.Fields> {
  encodeFields(fields: AlphHackTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = { Funded: 0, Transfered: 1 };
  consts = {
    ErrorCodes: {
      InsufficientAmount: BigInt("0"),
      Unauthorized: BigInt("1"),
      EmptyString: BigInt("2"),
      NotFound: BigInt("3"),
      AlreadyVoted: BigInt("4"),
    },
  };

  at(address: string): AlphHackInstance {
    return new AlphHackInstance(address);
  }

  tests = {
    receive: async (
      params: TestContractParams<
        AlphHackTypes.Fields,
        { amount: bigint },
        AlphHackTypes.Maps
      >
    ): Promise<TestContractResult<null, AlphHackTypes.Maps>> => {
      return testMethod(this, "receive", params, getContractByCodeHash);
    },
    transfer: async (
      params: TestContractParams<
        AlphHackTypes.Fields,
        { receiver: Address; amount: bigint },
        AlphHackTypes.Maps
      >
    ): Promise<TestContractResult<null, AlphHackTypes.Maps>> => {
      return testMethod(this, "transfer", params, getContractByCodeHash);
    },
    propose: async (
      params: TestContractParams<
        AlphHackTypes.Fields,
        { title: HexString; description: HexString; amount: bigint },
        AlphHackTypes.Maps
      >
    ): Promise<TestContractResult<null, AlphHackTypes.Maps>> => {
      return testMethod(this, "propose", params, getContractByCodeHash);
    },
    vote: async (
      params: TestContractParams<
        AlphHackTypes.Fields,
        { pid: bigint; choosen: boolean; amount: bigint },
        AlphHackTypes.Maps
      >
    ): Promise<TestContractResult<null, AlphHackTypes.Maps>> => {
      return testMethod(this, "vote", params, getContractByCodeHash);
    },
    getBalance: async (
      params: Omit<
        TestContractParams<AlphHackTypes.Fields, never, AlphHackTypes.Maps>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint, AlphHackTypes.Maps>> => {
      return testMethod(this, "getBalance", params, getContractByCodeHash);
    },
    getProposal: async (
      params: TestContractParams<
        AlphHackTypes.Fields,
        { pid: bigint },
        AlphHackTypes.Maps
      >
    ): Promise<TestContractResult<ProposalStruct, AlphHackTypes.Maps>> => {
      return testMethod(this, "getProposal", params, getContractByCodeHash);
    },
    getProposalCount: async (
      params: Omit<
        TestContractParams<AlphHackTypes.Fields, never, AlphHackTypes.Maps>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint, AlphHackTypes.Maps>> => {
      return testMethod(
        this,
        "getProposalCount",
        params,
        getContractByCodeHash
      );
    },
    hasVoted: async (
      params: TestContractParams<
        AlphHackTypes.Fields,
        { pid: bigint; voter: Address },
        AlphHackTypes.Maps
      >
    ): Promise<TestContractResult<boolean, AlphHackTypes.Maps>> => {
      return testMethod(this, "hasVoted", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: AlphHackTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: AlphHackTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const AlphHack = new Factory(
  Contract.fromJson(
    AlphHackContractJson,
    "=13+12=1-2=2-2+fe=1-1+20=1-1=2-2+9e=2-2+ac=2-2+d2=190-2+50=200+7a7e0214696e73657274206174206d617020706174683a2000=74+7a7e0214696e73657274206174206d617020706174683a2000=23-1+7=164+7a7e0214696e73657274206174206d617020706174683a2000=640",
    "4918577c0ea1d4bc098959d547f691c7aab03c278443b247dfb98a279c1b10f9",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class AlphHackInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    voted: new RalphMap<HexString, boolean>(
      AlphHack.contract,
      this.contractId,
      "voted"
    ),
    proposals: new RalphMap<bigint, ProposalStruct>(
      AlphHack.contract,
      this.contractId,
      "proposals"
    ),
  };

  async fetchState(): Promise<AlphHackTypes.State> {
    return fetchContractState(AlphHack, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeFundedEvent(
    options: EventSubscribeOptions<AlphHackTypes.FundedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      AlphHack.contract,
      this,
      options,
      "Funded",
      fromCount
    );
  }

  subscribeTransferedEvent(
    options: EventSubscribeOptions<AlphHackTypes.TransferedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      AlphHack.contract,
      this,
      options,
      "Transfered",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      AlphHackTypes.FundedEvent | AlphHackTypes.TransferedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(AlphHack.contract, this, options, fromCount);
  }

  view = {
    receive: async (
      params: AlphHackTypes.CallMethodParams<"receive">
    ): Promise<AlphHackTypes.CallMethodResult<"receive">> => {
      return callMethod(
        AlphHack,
        this,
        "receive",
        params,
        getContractByCodeHash
      );
    },
    transfer: async (
      params: AlphHackTypes.CallMethodParams<"transfer">
    ): Promise<AlphHackTypes.CallMethodResult<"transfer">> => {
      return callMethod(
        AlphHack,
        this,
        "transfer",
        params,
        getContractByCodeHash
      );
    },
    propose: async (
      params: AlphHackTypes.CallMethodParams<"propose">
    ): Promise<AlphHackTypes.CallMethodResult<"propose">> => {
      return callMethod(
        AlphHack,
        this,
        "propose",
        params,
        getContractByCodeHash
      );
    },
    vote: async (
      params: AlphHackTypes.CallMethodParams<"vote">
    ): Promise<AlphHackTypes.CallMethodResult<"vote">> => {
      return callMethod(AlphHack, this, "vote", params, getContractByCodeHash);
    },
    getBalance: async (
      params?: AlphHackTypes.CallMethodParams<"getBalance">
    ): Promise<AlphHackTypes.CallMethodResult<"getBalance">> => {
      return callMethod(
        AlphHack,
        this,
        "getBalance",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getProposal: async (
      params: AlphHackTypes.CallMethodParams<"getProposal">
    ): Promise<AlphHackTypes.CallMethodResult<"getProposal">> => {
      return callMethod(
        AlphHack,
        this,
        "getProposal",
        params,
        getContractByCodeHash
      );
    },
    getProposalCount: async (
      params?: AlphHackTypes.CallMethodParams<"getProposalCount">
    ): Promise<AlphHackTypes.CallMethodResult<"getProposalCount">> => {
      return callMethod(
        AlphHack,
        this,
        "getProposalCount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    hasVoted: async (
      params: AlphHackTypes.CallMethodParams<"hasVoted">
    ): Promise<AlphHackTypes.CallMethodResult<"hasVoted">> => {
      return callMethod(
        AlphHack,
        this,
        "hasVoted",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    receive: async (
      params: AlphHackTypes.SignExecuteMethodParams<"receive">
    ): Promise<AlphHackTypes.SignExecuteMethodResult<"receive">> => {
      return signExecuteMethod(AlphHack, this, "receive", params);
    },
    transfer: async (
      params: AlphHackTypes.SignExecuteMethodParams<"transfer">
    ): Promise<AlphHackTypes.SignExecuteMethodResult<"transfer">> => {
      return signExecuteMethod(AlphHack, this, "transfer", params);
    },
    propose: async (
      params: AlphHackTypes.SignExecuteMethodParams<"propose">
    ): Promise<AlphHackTypes.SignExecuteMethodResult<"propose">> => {
      return signExecuteMethod(AlphHack, this, "propose", params);
    },
    vote: async (
      params: AlphHackTypes.SignExecuteMethodParams<"vote">
    ): Promise<AlphHackTypes.SignExecuteMethodResult<"vote">> => {
      return signExecuteMethod(AlphHack, this, "vote", params);
    },
    getBalance: async (
      params: AlphHackTypes.SignExecuteMethodParams<"getBalance">
    ): Promise<AlphHackTypes.SignExecuteMethodResult<"getBalance">> => {
      return signExecuteMethod(AlphHack, this, "getBalance", params);
    },
    getProposal: async (
      params: AlphHackTypes.SignExecuteMethodParams<"getProposal">
    ): Promise<AlphHackTypes.SignExecuteMethodResult<"getProposal">> => {
      return signExecuteMethod(AlphHack, this, "getProposal", params);
    },
    getProposalCount: async (
      params: AlphHackTypes.SignExecuteMethodParams<"getProposalCount">
    ): Promise<AlphHackTypes.SignExecuteMethodResult<"getProposalCount">> => {
      return signExecuteMethod(AlphHack, this, "getProposalCount", params);
    },
    hasVoted: async (
      params: AlphHackTypes.SignExecuteMethodParams<"hasVoted">
    ): Promise<AlphHackTypes.SignExecuteMethodResult<"hasVoted">> => {
      return signExecuteMethod(AlphHack, this, "hasVoted", params);
    },
  };

  async multicall<Callss extends AlphHackTypes.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<AlphHackTypes.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      AlphHack,
      this,
      callss,
      getContractByCodeHash
    )) as AlphHackTypes.MulticallReturnType<Callss>;
  }
}
