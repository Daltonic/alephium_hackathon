import React from 'react'
import Head from 'next/head'
import Proposal from '@/components/Proposal'
import Link from 'next/link'
import { NextPage } from 'next'
import EmptyProposal from '@/components/EmptyProposal'

interface Props {
  proposalCount: number
}

const Page: NextPage<Props> = ({ proposalCount }) => {
  return (
    <div>
      <Head>
        <title>AlphHack - Proposal</title>
        <meta name="description" content="Generated by @alephium/cli init" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="text-gray-300 font-light">
        <div
          className="w-full flex justify-between items-center space-x-2
          border-b border-gray-300 border-b-gray-500 pb-4"
        >
          <div className="flex flex-col flex-wrap w-5/6">
            <h1 className="sm:text-3xl md:2xl text-xl">Create a New Proposal</h1>
            <p className="text-md mt-2">1 ALPH token for creating and voting on proposals</p>
          </div>
          <Link
            href={'/create'}
            className="bg-green-500 shadow-lg shadow-black text-white text-center
            rounded-full p-1 min-w-28 text-md hidden md:block hover:bg-[#141f34]
            transition duration-300 ease-in-out transform hover:scale-105 mx-auto mt-5"
          >
            Create
          </Link>
        </div>

        <div className="h-10" />

        {proposalCount < 1 && <EmptyProposal />}
        {proposalCount > 0 &&
          Array.from({ length: proposalCount }, (_, index) => index + 1)
            .reverse()
            .map((pid: number, i: number) => <Proposal proposalId={pid} key={i} />)}
      </div>
    </div>
  )
}

export default Page

export const getServerSideProps = async () => {
  try {
    const base_url = process.env.NEXT_PUBLIC_BASE_URL || ''
    const response = await fetch(`${base_url}/api/counts`)
    const data = await response.json()

    const proposalCount = data.count
    return {
      props: { proposalCount: JSON.parse(JSON.stringify(proposalCount)) }
    }
  } catch (error) {
    return {
      props: { proposalCount: 0 }
    }
  }
}
